// Auto generated by arraygen.py
template <typename T, int N>
Array<T, N> operator+(Array<T, N> a, Array<T, N> b) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] + b[i];
	return r;
}
template <typename T, int N> Array<T, N> operator+(Array<T, N> a, T s) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] + s;
	return r;
}
template <typename T, int N> Array<T, N> operator+(T s, Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = s + a[i];
	return r;
}
template <typename T, int N> Array<T, N> operator+(Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = +a[i];
	return r;
}
template <typename T, int N>
Array<T, N> operator-(Array<T, N> a, Array<T, N> b) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] - b[i];
	return r;
}
template <typename T, int N> Array<T, N> operator-(Array<T, N> a, T s) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] - s;
	return r;
}
template <typename T, int N> Array<T, N> operator-(T s, Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = s - a[i];
	return r;
}
template <typename T, int N> Array<T, N> operator-(Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = -a[i];
	return r;
}
template <typename T, int N>
Array<T, N> operator*(Array<T, N> a, Array<T, N> b) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] * b[i];
	return r;
}
template <typename T, int N> Array<T, N> operator*(Array<T, N> a, T s) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] * s;
	return r;
}
template <typename T, int N> Array<T, N> operator*(T s, Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = s * a[i];
	return r;
}
template <typename T, int N>
Array<T, N> operator/(Array<T, N> a, Array<T, N> b) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] / b[i];
	return r;
}
template <typename T, int N> Array<T, N> operator/(Array<T, N> a, T s) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] / s;
	return r;
}
template <typename T, int N> Array<T, N> operator/(T s, Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = s / a[i];
	return r;
}
template <typename T, int N>
Array<T, N> operator%(Array<T, N> a, Array<T, N> b) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] % b[i];
	return r;
}
template <typename T, int N> Array<T, N> operator%(Array<T, N> a, T s) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] % s;
	return r;
}
template <typename T, int N> Array<T, N> operator%(T s, Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = s % a[i];
	return r;
}
template <typename T, int N>
Array<T, N> operator&(Array<T, N> a, Array<T, N> b) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] & b[i];
	return r;
}
template <typename T, int N> Array<T, N> operator&(Array<T, N> a, T s) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] & s;
	return r;
}
template <typename T, int N> Array<T, N> operator&(T s, Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = s & a[i];
	return r;
}
template <typename T, int N>
Array<T, N> operator|(Array<T, N> a, Array<T, N> b) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] | b[i];
	return r;
}
template <typename T, int N> Array<T, N> operator|(Array<T, N> a, T s) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] | s;
	return r;
}
template <typename T, int N> Array<T, N> operator|(T s, Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = s | a[i];
	return r;
}
template <typename T, int N>
Array<T, N> operator^(Array<T, N> a, Array<T, N> b) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] ^ b[i];
	return r;
}
template <typename T, int N> Array<T, N> operator^(Array<T, N> a, T s) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] ^ s;
	return r;
}
template <typename T, int N> Array<T, N> operator^(T s, Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = s ^ a[i];
	return r;
}
template <typename T, int N> Array<T, N> operator~(Array<T, N> a) {
	Array<T, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = ~a[i];
	return r;
}
template <typename T, int N>
Array<bool, N> operator&&(Array<T, N> a, Array<T, N> b) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] && b[i];
	return r;
}
template <typename T, int N>
Array<bool, N> operator||(Array<T, N> a, Array<T, N> b) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] || b[i];
	return r;
}
template <typename T, int N>
Array<bool, N> operator==(Array<T, N> a, Array<T, N> b) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] == b[i];
	return r;
}
template <typename T, int N>
Array<bool, N> operator!=(Array<T, N> a, Array<T, N> b) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] != b[i];
	return r;
}
template <typename T, int N>
Array<bool, N> operator>=(Array<T, N> a, Array<T, N> b) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] >= b[i];
	return r;
}
template <typename T, int N>
Array<bool, N> operator<=(Array<T, N> a, Array<T, N> b) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] <= b[i];
	return r;
}
template <typename T, int N>
Array<bool, N> operator>(Array<T, N> a, Array<T, N> b) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] > b[i];
	return r;
}
template <typename T, int N>
Array<bool, N> operator<(Array<T, N> a, Array<T, N> b) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = a[i] < b[i];
	return r;
}
template <typename T, int N> Array<bool, N> operator!(Array<T, N> a) {
	Array<bool, N> r{};
	for (int i = 0; i < N; i++)
		r[i] = !a[i];
	return r;
}
